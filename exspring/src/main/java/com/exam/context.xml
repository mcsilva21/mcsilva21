<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

<!-- 빈(bean) : 본래는 Java Beans라는 규약(규칙)을 지켜서 만든 객체를 의미 -->
<!-- 최근에는 아래 2가지 정도의 조건만 만족하면 Bean이라고 부르며,인자없는 생성자가 존재 -->
<!-- 속성(멤버변수,필드)에 대한 getter/setter 메서드가 존재  -->
<!-- 사실상 인스턴스(객체)와 동일한 단어처럼 사용되고 있다. -->


<!-- com.exam.MyApp 클래스의 객체를 생성(new)하여 msen 라는 스프링에 등록 -->
<!-- 	<bean id="ma" class="com.exam.MyApp"> -->
	
<!-- MyApp 객체의 myService 변수(속성)에, 스프링 msen이라는 이름으로 등록된 갹체를 주입(저장) -->
<!-- 	<property name="myService" ref="msko"></property>	 -->
<!-- 	</bean> -->
	
<!-- com.exam.MyServiceEn클래스의 객체를 생성, 스프링 msen이라는 이름으로 등록된 갹체를 주입(저장) -->
<!-- 	<bean id="msen" class="com.exam.MyServiceEn"></bean> -->
	
<!-- <bean id="msko" class="com.exam.MyServiceKo"></bean> -->


<!-- com.exam 패키지(폴더)아래에 있는 클래스들 중 @component가 붙은 클래스들의 객체를 생성하여 스프링에 등록 -->
<!-- @Component 대신 객체의 역할에 따라서 cotroller,service,respinsitory -->
<context:component-scan base-package="com.exam"></context:component-scan>

<!-- Aop를 사용하여 끼워넣을 코드(메소드)를 담고 있는 클래스(Advice) 등록 -->
<bean id="myAdv" class="com.exam.MyAdvice"></bean>
	
<!-- 	AOP 설정 -->
<aop:config>
	<!-- pointcut : 코드를 끼워넣을 지점 -->
	<aop:pointcut expression="execution(* com.exam.*.*Helo*.*(..))" id="myPoint" />
	<!-- 어떤 코드(Advice)를 어느 지점(pointcut)의 어느 순간에 끼워 넣을지 설정 -->
	<aop:aspect ref="myAdv">
<!-- 	포인트컷 메서드가 정상적으로 실행된 전 끼워넣기 -->
	<aop:before method="log" pointcut-ref="myPoint" />
	
<!-- 포인트컷 메서드가 정상적으로 실행된 후 끼워넣기 -->
<!-- <aop:after-returning method=""/> -->
<!-- 포인트컷 메서드가 샐행 예외가 발생된 경우 끼워넣기 -->
<!-- <aop:after-throwing method=""/> -->
<!-- 포인트컷 메서드가 정상적으로 실행된 후 끼워넣기(정상종료,예외 발생 상관없음) -->	
<!-- <aop:after method=""/> -->
<!-- 포인트컷 메서드가 정상적으로 실행된 전과 후 끼워넣기(정상종료,예외 발생 상관없음) -->	
<!-- <aop:around method=""/> -->

	</aop:aspect>
</aop:config>
	
	
</beans>
