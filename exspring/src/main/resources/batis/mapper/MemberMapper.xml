<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- *.java,*.aml : 변경 후 재시작필요 (*.java는 실행 중 변경시 이클립스가 자동 재실행) -->
<!-- *.jsp,*.html,*.css,*js : 변경후 재시작이 필요없고, 브라우저에서 새로고침만 필요 -->

<!-- 현재 Mapper 파일(SQL문들의 집합)의 고유한 이름을 namespace 속성에 저장 -->
<!-- 일반적으로 여기 등록된 SQL문들을 실행할 인터페이스의 이름과 동일하게 설정 -->
<mapper namespace="kr.ac.kopo.member.MemberDao">
	<!-- MemberMap이라는 resultmap을 정의 -->
	<resultMap type="MemberVo" id="MemberMap">
		<!-- mem_id컬럼값을 kr.ac.kopo.member.MemberVo객체의 memId변수(속성)에 저장 -->
		<!-- 기본키(pk)에 해당하는 경우에는 id 태그를 사용 -->
		<id property="memId" column="mem_id" />
		<!-- mem_id컬럼값을 kr.ac.kopo.member.MemberVo객체의 memPass변수(속성)에 저장 -->
		<result property="memPass" column="mem_pass" />
		<!-- mem_id컬럼값을 kr.ac.kopo.member.MemberVo객체의 memName변수(속성)에 저장 -->
		<result property="memName" column="mem_name" />
		<!-- mem_id컬럼값을 kr.ac.kopo.member.MemberVo객체의 memPoint변수(속성)에 저장 -->
		<result property="memPoint" column="mem_point" />
	</resultMap>
<!-- 다수의 sql문에서 공통적으로 사용하는 부분을 별도의 sql구문으로 정의해 놓고, 필요한 곳 에서 includ하여 사용 가능 -->
	<sql id="searchSQL">
	<trim prefix="WHERE" prefixOverrides="AND|OR">					  
			<if test="searchType != null and searchWord != null and searchType =='id'">
				LOWER(mem_id) like '%' || LOWER(#{searchWord}) || '%'
	  		</if>
	  		<if test="searchType != null and searchWord != null and searchType =='name'">
				LOWER(mem_name) like '%' || LOWER(#{searchWord}) || '%'
	  		</if>
	  		<if test="searchType != null and searchWord != null and searchType =='all'">
				LOWER(mem_id) like '%' || LOWER(#{searchWord}) || '%' or LOWER(mem_name) like '%' || LOWER(#{searchWord}) || '%'
	  		</if>
	  		
	</trim>
	</sql>
	
	

	<!-- 실행할 SQL문과 동일한 이름의 엘리먼트를 사용하여 SQL문을 등록 -->
	<!-- SQL문의 고유한 이름을 id속성에 지정 -->
	<!-- 보통 SQL문들을 실행할 인터페이스의 메서드 이름과 동일하게 설정 -->
	<!-- 실행결과 레코드 1개를 담을 자바객체의 클래스명을 resultType 속성에 저장 -->
	<!--SELECT mem_id as memId, mem_pass as memPass, mem_name as memName, mem_point 
		as memPoint -->
	<!-- <select id="selectMemberList" resultType="kr.ac.kopo.member.MemberVo"> -->
	<!-- <select id="selectMemberList" resultMap="MemberMap"> -->
	
	<select id="selectMemberList" resultType="MemberVo" parameterType="kr.ac.kopo.comm.SearchInfo">
			SELECT mem_id, mem_pass, mem_name, mem_point,rnum
			from(SELECT mem_id, mem_pass, mem_name, mem_point,rownum rnum
				from (SELECT mem_id, mem_pass, mem_name, mem_point
					FROM member
					<include refid="searchSQL"></include>
					order by mem_name desc)
	<![CDATA[
			where rownum <=#{lastRecordIndex})
		where #{firstRecordIndex}  <= rnum
	 ]]>
	</select>

	<select id="selectCount" resultType="int" parameterType="kr.ac.kopo.comm.SearchInfo">
		SELECT count(*) FROM member		
		<include refid="searchSQL"></include>
	</select>

	<!-- 실행에 필요한 값을 받는 경우에는, 받을 값을 타입을 parameterType 속성에 저장 -->
	<select id="selectMember" parameterType="string"
		resultType="MemberVo">
		SELECT mem_id, mem_pass, mem_name, mem_point
		FROM member
		WHERE mem_id = #{memId}
	</select>

	<!-- 파라미터로 받은 객체의 속성(변수)값을 SQL문에 주입하기 위해서는 ${변수명}을 사용 -->
	<insert id="insertMember" parameterType="MemberVo">
		INSERT INTO member
		(mem_id,mem_pass,mem_name,mem_point)
		VALUES (#{memId},#{memPass},#{memName},#{memPoint})
	</insert>

	<update id="updateMember" parameterType="MemberVo">
		UPDATE member
		SET mem_name = #{memName}, mem_point =#{memPoint}
		where mem_id = #{memId}
	</update>

	<!--parameterType이 단일값을 갖는 객체인 경우(string,Integer...(단일값))에는 #{}의 이름은 무엇을 
		사용하든 상관없음 -->
	<delete id="delMember" parameterType="string">
		Delete from member
		where mem_id = #{memId}
	</delete>

	<select id="selectLoginMember"
		parameterType="kr.ac.kopo.member.MemberVo" resultType="MemberVo">
		SELECT mem_id, mem_pass, mem_name, mem_point
		FROM member
		WHERE mem_id = #{memId} and mem_pass = #{memPass}
	</select>


</mapper>